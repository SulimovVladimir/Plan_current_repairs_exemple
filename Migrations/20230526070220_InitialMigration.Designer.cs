// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Plan_current_repairs.Data.Models;

namespace Plan_current_repairs.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20230526070220_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Plan_current_repairs.Data.Models.Department", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("DirectorDepartment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameDepartment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            DirectorDepartment = "Есипов Дмитрий Владимирович",
                            NameDepartment = "Администрация"
                        });
                });

            modelBuilder.Entity("Plan_current_repairs.Data.Models.DictionarySector", b =>
                {
                    b.Property<int>("DictionarySectorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("DepartmentID")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("DictionarySectorID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("DictionarySector");
                });

            modelBuilder.Entity("Plan_current_repairs.Data.Models.Employee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Administrator")
                        .HasColumnType("boolean");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("integer");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Plan_current_repairs.Data.Models.FactByMount", b =>
                {
                    b.Property<int>("FactID")
                        .HasColumnType("integer");

                    b.Property<float>("FactForApril")
                        .HasColumnType("real");

                    b.Property<float>("FactForAugust")
                        .HasColumnType("real");

                    b.Property<float>("FactForDecember")
                        .HasColumnType("real");

                    b.Property<float>("FactForFebruary")
                        .HasColumnType("real");

                    b.Property<float>("FactForJanuary")
                        .HasColumnType("real");

                    b.Property<float>("FactForJuly")
                        .HasColumnType("real");

                    b.Property<float>("FactForJune")
                        .HasColumnType("real");

                    b.Property<float>("FactForMarch")
                        .HasColumnType("real");

                    b.Property<float>("FactForMay")
                        .HasColumnType("real");

                    b.Property<float>("FactForNovember")
                        .HasColumnType("real");

                    b.Property<float>("FactForOctober")
                        .HasColumnType("real");

                    b.Property<float>("FactForSeptember")
                        .HasColumnType("real");

                    b.Property<int>("JornalID")
                        .HasColumnType("integer");

                    b.HasKey("FactID");

                    b.HasIndex("JornalID")
                        .IsUnique();

                    b.ToTable("FactValue");
                });

            modelBuilder.Entity("Plan_current_repairs.Data.Models.GroupNameOfWorks", b =>
                {
                    b.Property<int>("GroupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("NameGroup")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("GroupID");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            GroupID = 1,
                            NameGroup = "Дополнительные работы, не предусмотренные планом"
                        });
                });

            modelBuilder.Entity("Plan_current_repairs.Data.Models.Jornal", b =>
                {
                    b.Property<int>("NumberRecordingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("CreatedInPlan")
                        .HasColumnType("boolean");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("integer");

                    b.Property<int>("NameOfWorksID")
                        .HasColumnType("integer");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("Sector")
                        .HasColumnType("text");

                    b.Property<int>("YearID")
                        .HasColumnType("integer");

                    b.HasKey("NumberRecordingID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("NameOfWorksID");

                    b.HasIndex("YearID");

                    b.ToTable("Jornals");
                });

            modelBuilder.Entity("Plan_current_repairs.Data.Models.NameOfWorks", b =>
                {
                    b.Property<int>("WorkID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Discription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GroupNameOfWorksID")
                        .HasColumnType("integer");

                    b.Property<bool>("IntegerValue")
                        .HasColumnType("boolean");

                    b.Property<string>("NameOfWork")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Parameter_1")
                        .HasColumnType("text");

                    b.Property<string>("Parameter_2")
                        .HasColumnType("text");

                    b.Property<string>("Parameter_3")
                        .HasColumnType("text");

                    b.Property<string>("Periodicity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TypeRecords")
                        .HasColumnType("text");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("WorkID");

                    b.HasIndex("GroupNameOfWorksID");

                    b.ToTable("Works");
                });

            modelBuilder.Entity("Plan_current_repairs.Data.Models.OtherWork", b =>
                {
                    b.Property<int>("OtherWorkID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("DepartmentID")
                        .HasColumnType("integer");

                    b.Property<string>("DiscriptionOtherWork")
                        .HasColumnType("text");

                    b.Property<string>("NameOtherWork")
                        .HasColumnType("text");

                    b.Property<string>("NoteOtherWork")
                        .HasColumnType("text");

                    b.Property<string>("PeriodicityOtherWork")
                        .HasColumnType("text");

                    b.Property<string>("UnitOtherWork")
                        .HasColumnType("text");

                    b.Property<int>("YearID")
                        .HasColumnType("integer");

                    b.Property<string>("_FactValue")
                        .HasColumnType("text")
                        .HasColumnName("OtherFactValue");

                    b.Property<string>("_PlanValue")
                        .HasColumnType("text")
                        .HasColumnName("OtherPlanValue");

                    b.HasKey("OtherWorkID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("YearID");

                    b.ToTable("OtherWorks");
                });

            modelBuilder.Entity("Plan_current_repairs.Data.Models.Parameters_1", b =>
                {
                    b.Property<int>("Parameter_1ID")
                        .HasColumnType("integer");

                    b.Property<float>("FactParameter_1ForApril")
                        .HasColumnType("real");

                    b.Property<float>("FactParameter_1ForAugust")
                        .HasColumnType("real");

                    b.Property<float>("FactParameter_1ForDecember")
                        .HasColumnType("real");

                    b.Property<float>("FactParameter_1ForFebruary")
                        .HasColumnType("real");

                    b.Property<float>("FactParameter_1ForJanuary")
                        .HasColumnType("real");

                    b.Property<float>("FactParameter_1ForJuly")
                        .HasColumnType("real");

                    b.Property<float>("FactParameter_1ForJune")
                        .HasColumnType("real");

                    b.Property<float>("FactParameter_1ForMarch")
                        .HasColumnType("real");

                    b.Property<float>("FactParameter_1ForMay")
                        .HasColumnType("real");

                    b.Property<float>("FactParameter_1ForNovember")
                        .HasColumnType("real");

                    b.Property<float>("FactParameter_1ForOctober")
                        .HasColumnType("real");

                    b.Property<float>("FactParameter_1ForSeptember")
                        .HasColumnType("real");

                    b.Property<int>("JornalID")
                        .HasColumnType("integer");

                    b.Property<float>("PlanParameter_1ForApril")
                        .HasColumnType("real");

                    b.Property<float>("PlanParameter_1ForAugust")
                        .HasColumnType("real");

                    b.Property<float>("PlanParameter_1ForDecember")
                        .HasColumnType("real");

                    b.Property<float>("PlanParameter_1ForFebruary")
                        .HasColumnType("real");

                    b.Property<float>("PlanParameter_1ForJanuary")
                        .HasColumnType("real");

                    b.Property<float>("PlanParameter_1ForJuly")
                        .HasColumnType("real");

                    b.Property<float>("PlanParameter_1ForJune")
                        .HasColumnType("real");

                    b.Property<float>("PlanParameter_1ForMarch")
                        .HasColumnType("real");

                    b.Property<float>("PlanParameter_1ForMay")
                        .HasColumnType("real");

                    b.Property<float>("PlanParameter_1ForNovember")
                        .HasColumnType("real");

                    b.Property<float>("PlanParameter_1ForOctober")
                        .HasColumnType("real");

                    b.Property<float>("PlanParameter_1ForSeptember")
                        .HasColumnType("real");

                    b.HasKey("Parameter_1ID");

                    b.HasIndex("JornalID")
                        .IsUnique();

                    b.ToTable("Parameters_1");
                });

            modelBuilder.Entity("Plan_current_repairs.Data.Models.Parameters_2", b =>
                {
                    b.Property<int>("Parameter_2ID")
                        .HasColumnType("integer");

                    b.Property<float>("FactParameter_2ForApril")
                        .HasColumnType("real");

                    b.Property<float>("FactParameter_2ForAugust")
                        .HasColumnType("real");

                    b.Property<float>("FactParameter_2ForDecember")
                        .HasColumnType("real");

                    b.Property<float>("FactParameter_2ForFebruary")
                        .HasColumnType("real");

                    b.Property<float>("FactParameter_2ForJanuary")
                        .HasColumnType("real");

                    b.Property<float>("FactParameter_2ForJuly")
                        .HasColumnType("real");

                    b.Property<float>("FactParameter_2ForJune")
                        .HasColumnType("real");

                    b.Property<float>("FactParameter_2ForMarch")
                        .HasColumnType("real");

                    b.Property<float>("FactParameter_2ForMay")
                        .HasColumnType("real");

                    b.Property<float>("FactParameter_2ForNovember")
                        .HasColumnType("real");

                    b.Property<float>("FactParameter_2ForOctober")
                        .HasColumnType("real");

                    b.Property<float>("FactParameter_2ForSeptember")
                        .HasColumnType("real");

                    b.Property<int>("JornalID")
                        .HasColumnType("integer");

                    b.Property<float>("PlanParameter_2ForApril")
                        .HasColumnType("real");

                    b.Property<float>("PlanParameter_2ForAugust")
                        .HasColumnType("real");

                    b.Property<float>("PlanParameter_2ForDecember")
                        .HasColumnType("real");

                    b.Property<float>("PlanParameter_2ForFebruary")
                        .HasColumnType("real");

                    b.Property<float>("PlanParameter_2ForJanuary")
                        .HasColumnType("real");

                    b.Property<float>("PlanParameter_2ForJuly")
                        .HasColumnType("real");

                    b.Property<float>("PlanParameter_2ForJune")
                        .HasColumnType("real");

                    b.Property<float>("PlanParameter_2ForMarch")
                        .HasColumnType("real");

                    b.Property<float>("PlanParameter_2ForMay")
                        .HasColumnType("real");

                    b.Property<float>("PlanParameter_2ForNovember")
                        .HasColumnType("real");

                    b.Property<float>("PlanParameter_2ForOctober")
                        .HasColumnType("real");

                    b.Property<float>("PlanParameter_2ForSeptember")
                        .HasColumnType("real");

                    b.HasKey("Parameter_2ID");

                    b.HasIndex("JornalID")
                        .IsUnique();

                    b.ToTable("Parameters_2");
                });

            modelBuilder.Entity("Plan_current_repairs.Data.Models.Parameters_3", b =>
                {
                    b.Property<int>("Parameter_3ID")
                        .HasColumnType("integer");

                    b.Property<float>("FactParameter_3ForApril")
                        .HasColumnType("real");

                    b.Property<float>("FactParameter_3ForAugust")
                        .HasColumnType("real");

                    b.Property<float>("FactParameter_3ForDecember")
                        .HasColumnType("real");

                    b.Property<float>("FactParameter_3ForFebruary")
                        .HasColumnType("real");

                    b.Property<float>("FactParameter_3ForJanuary")
                        .HasColumnType("real");

                    b.Property<float>("FactParameter_3ForJuly")
                        .HasColumnType("real");

                    b.Property<float>("FactParameter_3ForJune")
                        .HasColumnType("real");

                    b.Property<float>("FactParameter_3ForMarch")
                        .HasColumnType("real");

                    b.Property<float>("FactParameter_3ForMay")
                        .HasColumnType("real");

                    b.Property<float>("FactParameter_3ForNovember")
                        .HasColumnType("real");

                    b.Property<float>("FactParameter_3ForOctober")
                        .HasColumnType("real");

                    b.Property<float>("FactParameter_3ForSeptember")
                        .HasColumnType("real");

                    b.Property<int>("JornalID")
                        .HasColumnType("integer");

                    b.Property<float>("PlanParameter_3ForApril")
                        .HasColumnType("real");

                    b.Property<float>("PlanParameter_3ForAugust")
                        .HasColumnType("real");

                    b.Property<float>("PlanParameter_3ForDecember")
                        .HasColumnType("real");

                    b.Property<float>("PlanParameter_3ForFebruary")
                        .HasColumnType("real");

                    b.Property<float>("PlanParameter_3ForJanuary")
                        .HasColumnType("real");

                    b.Property<float>("PlanParameter_3ForJuly")
                        .HasColumnType("real");

                    b.Property<float>("PlanParameter_3ForJune")
                        .HasColumnType("real");

                    b.Property<float>("PlanParameter_3ForMarch")
                        .HasColumnType("real");

                    b.Property<float>("PlanParameter_3ForMay")
                        .HasColumnType("real");

                    b.Property<float>("PlanParameter_3ForNovember")
                        .HasColumnType("real");

                    b.Property<float>("PlanParameter_3ForOctober")
                        .HasColumnType("real");

                    b.Property<float>("PlanParameter_3ForSeptember")
                        .HasColumnType("real");

                    b.HasKey("Parameter_3ID");

                    b.HasIndex("JornalID")
                        .IsUnique();

                    b.ToTable("Parameters_3");
                });

            modelBuilder.Entity("Plan_current_repairs.Data.Models.PlanByMount", b =>
                {
                    b.Property<int>("PlanID")
                        .HasColumnType("integer");

                    b.Property<int>("JornalID")
                        .HasColumnType("integer");

                    b.Property<float>("PlanForApril")
                        .HasColumnType("real");

                    b.Property<float>("PlanForAugust")
                        .HasColumnType("real");

                    b.Property<float>("PlanForDecember")
                        .HasColumnType("real");

                    b.Property<float>("PlanForFebruary")
                        .HasColumnType("real");

                    b.Property<float>("PlanForJanuary")
                        .HasColumnType("real");

                    b.Property<float>("PlanForJuly")
                        .HasColumnType("real");

                    b.Property<float>("PlanForJune")
                        .HasColumnType("real");

                    b.Property<float>("PlanForMarch")
                        .HasColumnType("real");

                    b.Property<float>("PlanForMay")
                        .HasColumnType("real");

                    b.Property<float>("PlanForNovember")
                        .HasColumnType("real");

                    b.Property<float>("PlanForOctober")
                        .HasColumnType("real");

                    b.Property<float>("PlanForSeptember")
                        .HasColumnType("real");

                    b.HasKey("PlanID");

                    b.HasIndex("JornalID")
                        .IsUnique();

                    b.ToTable("PlanValue");
                });

            modelBuilder.Entity("Plan_current_repairs.Data.Models.Year", b =>
                {
                    b.Property<int>("YearID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Years")
                        .HasColumnType("integer");

                    b.HasKey("YearID");

                    b.ToTable("Years");
                });

            modelBuilder.Entity("Plan_current_repairs.Data.Models.DictionarySector", b =>
                {
                    b.HasOne("Plan_current_repairs.Data.Models.Department", "Department")
                        .WithMany("DictionarySector")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Plan_current_repairs.Data.Models.Employee", b =>
                {
                    b.HasOne("Plan_current_repairs.Data.Models.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Plan_current_repairs.Data.Models.FactByMount", b =>
                {
                    b.HasOne("Plan_current_repairs.Data.Models.Jornal", "Jornal")
                        .WithOne("FactValue")
                        .HasForeignKey("Plan_current_repairs.Data.Models.FactByMount", "JornalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Jornal");
                });

            modelBuilder.Entity("Plan_current_repairs.Data.Models.Jornal", b =>
                {
                    b.HasOne("Plan_current_repairs.Data.Models.Department", "department")
                        .WithMany("RecordsJornal")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plan_current_repairs.Data.Models.NameOfWorks", "nameOfWorks")
                        .WithMany("Records")
                        .HasForeignKey("NameOfWorksID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plan_current_repairs.Data.Models.Year", "year")
                        .WithMany("records")
                        .HasForeignKey("YearID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("department");

                    b.Navigation("nameOfWorks");

                    b.Navigation("year");
                });

            modelBuilder.Entity("Plan_current_repairs.Data.Models.NameOfWorks", b =>
                {
                    b.HasOne("Plan_current_repairs.Data.Models.GroupNameOfWorks", "GroupName")
                        .WithMany("Works")
                        .HasForeignKey("GroupNameOfWorksID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupName");
                });

            modelBuilder.Entity("Plan_current_repairs.Data.Models.OtherWork", b =>
                {
                    b.HasOne("Plan_current_repairs.Data.Models.Department", "department")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plan_current_repairs.Data.Models.Year", "year")
                        .WithMany()
                        .HasForeignKey("YearID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("department");

                    b.Navigation("year");
                });

            modelBuilder.Entity("Plan_current_repairs.Data.Models.Parameters_1", b =>
                {
                    b.HasOne("Plan_current_repairs.Data.Models.Jornal", "Jornal")
                        .WithOne("Parameters_1")
                        .HasForeignKey("Plan_current_repairs.Data.Models.Parameters_1", "JornalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Jornal");
                });

            modelBuilder.Entity("Plan_current_repairs.Data.Models.Parameters_2", b =>
                {
                    b.HasOne("Plan_current_repairs.Data.Models.Jornal", "Jornal")
                        .WithOne("Parameters_2")
                        .HasForeignKey("Plan_current_repairs.Data.Models.Parameters_2", "JornalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Jornal");
                });

            modelBuilder.Entity("Plan_current_repairs.Data.Models.Parameters_3", b =>
                {
                    b.HasOne("Plan_current_repairs.Data.Models.Jornal", "Jornal")
                        .WithOne("Parameters_3")
                        .HasForeignKey("Plan_current_repairs.Data.Models.Parameters_3", "JornalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Jornal");
                });

            modelBuilder.Entity("Plan_current_repairs.Data.Models.PlanByMount", b =>
                {
                    b.HasOne("Plan_current_repairs.Data.Models.Jornal", "Jornal")
                        .WithOne("PlanValue")
                        .HasForeignKey("Plan_current_repairs.Data.Models.PlanByMount", "JornalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Jornal");
                });

            modelBuilder.Entity("Plan_current_repairs.Data.Models.Department", b =>
                {
                    b.Navigation("DictionarySector");

                    b.Navigation("Employees");

                    b.Navigation("RecordsJornal");
                });

            modelBuilder.Entity("Plan_current_repairs.Data.Models.GroupNameOfWorks", b =>
                {
                    b.Navigation("Works");
                });

            modelBuilder.Entity("Plan_current_repairs.Data.Models.Jornal", b =>
                {
                    b.Navigation("FactValue");

                    b.Navigation("Parameters_1");

                    b.Navigation("Parameters_2");

                    b.Navigation("Parameters_3");

                    b.Navigation("PlanValue");
                });

            modelBuilder.Entity("Plan_current_repairs.Data.Models.NameOfWorks", b =>
                {
                    b.Navigation("Records");
                });

            modelBuilder.Entity("Plan_current_repairs.Data.Models.Year", b =>
                {
                    b.Navigation("records");
                });
#pragma warning restore 612, 618
        }
    }
}
